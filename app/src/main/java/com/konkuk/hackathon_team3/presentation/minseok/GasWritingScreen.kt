package com.konkuk.hackathon_team3.presentation.minseok

import android.Manifest
import android.content.pm.PackageManager
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import androidx.lifecycle.viewmodel.compose.viewModel
import com.konkuk.hackathon_team3.presentation.util.noRippleClickable
import com.konkuk.hackathon_team3.ui.theme.KONKUKHACKATHONTEAM3Theme

@Composable
fun GasWritingRoute(
    navigateToRanking: () -> Unit,
    modifier: Modifier = Modifier,
    viewModel: GasWritingViewModel = viewModel()
) {
    val uiState by viewModel.uiState.collectAsState()
    val context = LocalContext.current

    // Í∂åÌïú ÏöîÏ≤≠ Îü∞Ï≤ò
    val permissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        viewModel.updatePermission(isGranted)
    }

    // Í∂åÌïú ÌôïÏù∏
    LaunchedEffect(Unit) {
        val hasPermission = ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.RECORD_AUDIO
        ) == PackageManager.PERMISSION_GRANTED

        if (hasPermission) {
            viewModel.updatePermission(true)
        } else {
            permissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
        }
    }

    GasWritingScreen(
        uiState = uiState,
        navigateToRanking = navigateToRanking,
        recordButtonClicked = { viewModel.recordButtonClicked(context = context) },
        playButtonClicked = { viewModel.playRecording() },
        // ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Ìï®ÏàòÎì§
        updateClientId = viewModel::updateClientId,
        updateClientSecret = viewModel::updateClientSecret,
        updateLanguage = viewModel::updateLanguage,
        clearText = viewModel::clearText,
        clearErrors = viewModel::clearErrors,
        modifier = modifier
    )
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GasWritingScreen(
    uiState: GasWritingUiState,
    navigateToRanking: () -> Unit,
    recordButtonClicked: () -> Unit,
    playButtonClicked: () -> Unit,
    // ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú ÌååÎùºÎØ∏ÌÑ∞Îì§
    updateClientId: (String) -> Unit,
    updateClientSecret: (String) -> Unit,
    updateLanguage: (String) -> Unit,
    clearText: () -> Unit,
    clearErrors: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(rememberScrollState()),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(20.dp)
    ) {

        // üéØ ÏÉÅÎã®: Í∏∞Ï°¥ Îû≠ÌÇπ Î≤ÑÌäº
        Button(
            onClick = navigateToRanking,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("to Ranking")
        }

        // üéØ Í∂åÌïú ÏÉÅÌÉú ÏïåÎ¶º
        if (!uiState.hasAudioPermission) {
            Card(
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.errorContainer
                ),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = "‚ö†Ô∏è ÎßàÏù¥ÌÅ¨ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§",
                    modifier = Modifier.padding(16.dp),
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onErrorContainer,
                    fontWeight = FontWeight.Bold
                )
            }
        }

        // üéØ API ÌÇ§ ÏÑ§Ï†ï Ïπ¥Îìú
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Text(
                    "üîß Ïã§ÏãúÍ∞Ñ STT ÏÑ§Ï†ï (ÏÑ†ÌÉùÏÇ¨Ìï≠)",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )

                OutlinedTextField(
                    value = uiState.clientId,
                    onValueChange = updateClientId,
                    label = { Text("Client ID") },
                    placeholder = { Text("ÎÑ§Ïù¥Î≤Ñ ÌÅ¥ÎùºÏö∞Îìú Client ID") },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true
                )

                OutlinedTextField(
                    value = uiState.clientSecret,
                    onValueChange = updateClientSecret,
                    label = { Text("Client Secret") },
                    placeholder = { Text("ÎÑ§Ïù¥Î≤Ñ ÌÅ¥ÎùºÏö∞Îìú Client Secret") },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true
                )

                // Ïñ∏Ïñ¥ ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥
                var expanded by remember { mutableStateOf(false) }
                val languages = mapOf(
                    "Kor" to "üá∞üá∑ ÌïúÍµ≠Ïñ¥",
                    "Eng" to "üá∫üá∏ ÏòÅÏñ¥",
                    "Jpn" to "üáØüáµ ÏùºÎ≥∏Ïñ¥",
                    "Chn" to "üá®üá≥ Ï§ëÍµ≠Ïñ¥"
                )

                ExposedDropdownMenuBox(
                    expanded = expanded,
                    onExpandedChange = { expanded = !expanded }
                ) {
                    OutlinedTextField(
                        value = languages[uiState.selectedLanguage] ?: "üá∞üá∑ ÌïúÍµ≠Ïñ¥",
                        onValueChange = {},
                        readOnly = true,
                        label = { Text("Ïñ∏Ïñ¥") },
                        trailingIcon = {
                            ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)
                        },
                        modifier = Modifier
                            .menuAnchor()
                            .fillMaxWidth()
                    )

                    ExposedDropdownMenu(
                        expanded = expanded,
                        onDismissRequest = { expanded = false }
                    ) {
                        languages.forEach { (code, name) ->
                            DropdownMenuItem(
                                text = { Text(name) },
                                onClick = {
                                    updateLanguage(code)
                                    expanded = false
                                }
                            )
                        }
                    }
                }

                Text(
                    "üí° API ÌÇ§Î•º ÏûÖÎ†•ÌïòÎ©¥ ÎÖπÏùå Ï§ë Ïã§ÏãúÍ∞Ñ ÌÖçÏä§Ìä∏ Î≥ÄÌôòÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    fontStyle = FontStyle.Italic
                )
            }
        }

        // üéØ ÎÖπÏùå ÏÉÅÌÉú ÌëúÏãú Ïπ¥Îìú
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = if (uiState.isRecording)
                    MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.1f)
                else
                    MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.1f)
            )
        ) {
            Column(
                modifier = Modifier.padding(20.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                // ÎÖπÏùå Î≤ÑÌäº (Í∏∞Ï°¥ Ïä§ÌÉÄÏùº Ïú†ÏßÄÌïòÎêò Í∞ïÏ°∞)
                Text(
                    text = if (uiState.isRecording) "üî¥ ÎÖπÏùå Ï§ë..." else "üé§ ÎÖπÏùåÌïòÍ∏∞",
                    modifier = Modifier.noRippleClickable(onClick = recordButtonClicked),
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold,
                    color = if (uiState.isRecording) Color.Red else MaterialTheme.colorScheme.primary
                )

                // Ïã§ÏãúÍ∞Ñ STT ÏÉÅÌÉú
                if (uiState.isRecording) {
                    if (uiState.clientId.isNotEmpty()) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            Text(
                                "üü¢ Ïã§ÏãúÍ∞Ñ STT ÏûëÎèô Ï§ë",
                                style = MaterialTheme.typography.bodySmall,
                                color = Color(0xFF4CAF50),
                                fontWeight = FontWeight.Medium
                            )

                            if (uiState.chunkCount > 0) {
                                Text(
                                    "| Ï≤≠ÌÅ¨ #${uiState.chunkCount}",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }

                            if (uiState.isProcessingSTT) {
                                CircularProgressIndicator(
                                    modifier = Modifier.size(16.dp),
                                    strokeWidth = 2.dp,
                                    color = MaterialTheme.colorScheme.primary
                                )
                            }
                        }
                    } else {
                        Text(
                            "üìÅ ÌååÏùº ÎÖπÏùåÎßå ÏßÑÌñâ Ï§ë (Ïã§ÏãúÍ∞Ñ STT ÎπÑÌôúÏÑ±)",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant,
                            fontStyle = FontStyle.Italic
                        )
                    }
                }
            }
        }

        // üéØ Ïû¨ÏÉù Î≤ÑÌäº (Í∏∞Ï°¥ Ïä§ÌÉÄÏùº Ïú†ÏßÄ)
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = if (uiState.audioRecord != null)
                    MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f)
                else
                    MaterialTheme.colorScheme.surfaceVariant
            )
        ) {
            Text(
                text = if (uiState.audioRecord == null) "üìÇ ÏùåÏÑ±ÌååÏùº ÎπÑÏñ¥ÏûàÏùå" else "‚ñ∂Ô∏è Ïû¨ÏÉùÌïòÍ∏∞",
                modifier = Modifier
                    .fillMaxWidth()
                    .noRippleClickable {
                        if (uiState.audioRecord != null) {
                            playButtonClicked()
                        }
                    }
                    .padding(20.dp),
                style = MaterialTheme.typography.titleMedium,
                color = if (uiState.audioRecord != null)
                    MaterialTheme.colorScheme.primary
                else
                    MaterialTheme.colorScheme.onSurfaceVariant,
                fontWeight = if (uiState.audioRecord != null) FontWeight.Medium else FontWeight.Normal
            )
        }

        // üéØ Ïã§ÏãúÍ∞Ñ ÌÖçÏä§Ìä∏ Í≤∞Í≥º ÌëúÏãú
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .heightIn(min = 120.dp, max = 400.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        "üìù Ïã§ÏãúÍ∞Ñ ÌÖçÏä§Ìä∏",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )

                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        // Ï≤òÎ¶¨ ÏÉÅÌÉú ÌëúÏãú
                        if (uiState.isProcessingSTT) {
                            CircularProgressIndicator(
                                modifier = Modifier.size(16.dp),
                                strokeWidth = 2.dp,
                                color = MaterialTheme.colorScheme.primary
                            )
                            Text(
                                "Î≥ÄÌôòÏ§ë",
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.primary
                            )
                        }

                        if (uiState.realTimeFullText.isNotEmpty()) {
                            TextButton(
                                onClick = clearText,
                                contentPadding = PaddingValues(horizontal = 8.dp, vertical = 4.dp)
                            ) {
                                Text("ÏßÄÏö∞Í∏∞", style = MaterialTheme.typography.bodySmall)
                            }
                        }
                    }
                }

                Spacer(modifier = Modifier.height(12.dp))

                // ÌÖçÏä§Ìä∏ ÏòÅÏó≠
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f, fill = false),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.3f)
                    )
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(12.dp)
                            .verticalScroll(rememberScrollState())
                    ) {
                        when {
                            // ÏïÑÎ¨¥Í≤ÉÎèÑ ÏóÜÏùÑ Îïå
                            uiState.realTimeFullText.isEmpty() && !uiState.isRecording -> {
                                Text(
                                    "üé§ ÎÖπÏùåÏùÑ ÏãúÏûëÌïòÎ©¥ Ïó¨Í∏∞Ïóê Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌÖçÏä§Ìä∏Í∞Ä ÎÇòÌÉÄÎÇ©ÎãàÎã§\n\nüí° Ïã§ÏãúÍ∞Ñ Î≥ÄÌôòÏùÑ ÏúÑÌï¥ÏÑúÎäî ÏúÑÏóêÏÑú API ÌÇ§Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                                    fontStyle = FontStyle.Italic,
                                    lineHeight = MaterialTheme.typography.bodyMedium.lineHeight
                                )
                            }

                            // ÎÖπÏùå Ï§ëÏù∏Îç∞ API ÌÇ§ ÏóÜÏùå
                            uiState.isRecording && uiState.realTimeFullText.isEmpty() && uiState.clientId.isEmpty() -> {
                                Text(
                                    "üîë Ïã§ÏãúÍ∞Ñ ÌÖçÏä§Ìä∏ Î≥ÄÌôòÏùÑ Î≥¥Î†§Î©¥ ÏúÑÏóêÏÑú API ÌÇ§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\n\nÌòÑÏû¨Îäî ÌååÏùº ÎÖπÏùåÎßå ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                                    fontStyle = FontStyle.Italic,
                                    lineHeight = MaterialTheme.typography.bodyMedium.lineHeight
                                )
                            }

                            // ÎÖπÏùå Ï§ëÏù∏Îç∞ ÏïÑÏßÅ ÌÖçÏä§Ìä∏ ÏóÜÏùå
                            uiState.isRecording && uiState.realTimeFullText.isEmpty() && uiState.clientId.isNotEmpty() && !uiState.isProcessingSTT -> {
                                Text(
                                    "üé§ ÏùåÏÑ± Ïù∏Ïãù ÎåÄÍ∏∞ Ï§ë...\nÎßêÏîÄÌï¥Ï£ºÏãúÎ©¥ 2Ï¥àÎßàÎã§ ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôòÎê©ÎãàÎã§",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.primary,
                                    fontStyle = FontStyle.Italic,
                                    lineHeight = MaterialTheme.typography.bodyMedium.lineHeight
                                )
                            }

                            // ÌÖçÏä§Ìä∏Í∞Ä ÏûàÏùÑ Îïå
                            else -> {
                                Column(
                                    verticalArrangement = Arrangement.spacedBy(4.dp)
                                ) {
                                    // ÌôïÏ†ïÎêú ÌÖçÏä§Ìä∏ (Í≤ÄÏùÄÏÉâ)
                                    if (uiState.finalText.isNotEmpty()) {
                                        Text(
                                            text = uiState.finalText,
                                            style = MaterialTheme.typography.bodyLarge,
                                            color = MaterialTheme.colorScheme.onSurface,
                                            lineHeight = MaterialTheme.typography.bodyLarge.lineHeight
                                        )
                                    }

                                    // Ïã§ÏãúÍ∞Ñ Î≥ÄÌôò Ï§ëÏù∏ ÌÖçÏä§Ìä∏ (ÌöåÏÉâ, Ïù¥ÌÉ§Î¶≠)
                                    if (uiState.partialText.isNotEmpty()) {
                                        Text(
                                            text = uiState.partialText,
                                            style = MaterialTheme.typography.bodyLarge,
                                            color = MaterialTheme.colorScheme.onSurfaceVariant,
                                            fontStyle = FontStyle.Italic,
                                            lineHeight = MaterialTheme.typography.bodyLarge.lineHeight
                                        )
                                    }

                                    // Î≥ÄÌôò Ï§ë ÌëúÏãú
                                    if (uiState.isProcessingSTT && uiState.realTimeFullText.isNotEmpty()) {
                                        Text(
                                            "‚è≥ Î≥ÄÌôò Ï§ë...",
                                            style = MaterialTheme.typography.bodySmall,
                                            color = MaterialTheme.colorScheme.primary,
                                            fontStyle = FontStyle.Italic
                                        )
                                    }
                                }
                            }
                        }
                    }
                }

                // ÌïòÎã® ÏÉÅÌÉú Ï†ïÎ≥¥
                if (uiState.isRecording && uiState.clientId.isNotEmpty()) {
                    Spacer(modifier = Modifier.height(8.dp))
                    HorizontalDivider(color = MaterialTheme.colorScheme.outlineVariant)
                    Spacer(modifier = Modifier.height(8.dp))

                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            "üî¥ Ïã§ÏãúÍ∞Ñ STT ÌôúÏÑ±",
                            style = MaterialTheme.typography.bodySmall,
                            color = Color.Red,
                            fontWeight = FontWeight.Medium
                        )

                        Text(
                            "Ïñ∏Ïñ¥: ${when(uiState.selectedLanguage) {
                                "Kor" -> "üá∞üá∑ ÌïúÍµ≠Ïñ¥"
                                "Eng" -> "üá∫üá∏ ÏòÅÏñ¥"
                                "Jpn" -> "üáØüáµ ÏùºÎ≥∏Ïñ¥"
                                "Chn" -> "üá®üá≥ Ï§ëÍµ≠Ïñ¥"
                                else -> "üá∞üá∑ ÌïúÍµ≠Ïñ¥"
                            }}",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            }
        }

        // üéØ ÏóêÎü¨ Î©îÏãúÏßÄÎì§
        // STT ÏóêÎü¨
        uiState.sttError?.let { error ->
            Card(
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.errorContainer
                ),
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(
                    modifier = Modifier.padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text("‚ùå", style = MaterialTheme.typography.titleMedium)

                    Text(
                        text = "STT Ïò§Î•ò: $error",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onErrorContainer,
                        modifier = Modifier.weight(1f)
                    )

                    TextButton(
                        onClick = clearErrors,
                        contentPadding = PaddingValues(horizontal = 8.dp, vertical = 4.dp)
                    ) {
                        Text("Îã´Í∏∞", style = MaterialTheme.typography.bodySmall)
                    }
                }
            }
        }

        // ÎÖπÏùå ÏóêÎü¨
        uiState.recordingError?.let { error ->
            Card(
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.errorContainer
                ),
                modifier = Modifier.fillMaxWidth()
            ) {
                Row(
                    modifier = Modifier.padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text("‚ö†Ô∏è", style = MaterialTheme.typography.titleMedium)

                    Text(
                        text = "ÎÖπÏùå Ïò§Î•ò: $error",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onErrorContainer,
                        modifier = Modifier.weight(1f)
                    )

                    TextButton(
                        onClick = clearErrors,
                        contentPadding = PaddingValues(horizontal = 8.dp, vertical = 4.dp)
                    ) {
                        Text("Îã´Í∏∞", style = MaterialTheme.typography.bodySmall)
                    }
                }
            }
        }

        // üéØ ÎèÑÏõÄÎßê Ïπ¥Îìú (ÌïòÎã®)
        Card(
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)
            ),
            modifier = Modifier.fillMaxWidth()
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    "üí° ÏÇ¨Ïö© Î∞©Î≤ï",
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )

                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    "1Ô∏è‚É£ API ÌÇ§ ÏûÖÎ†• (ÏÑ†ÌÉùÏÇ¨Ìï≠)\n" +
                            "2Ô∏è‚É£ 'ÎÖπÏùåÌïòÍ∏∞' ÌÑ∞ÏπòÌïòÏó¨ ÎÖπÏùå ÏãúÏûë\n" +
                            "3Ô∏è‚É£ ÎßêÏîÄÌïòÏãúÎ©¥ Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌÖçÏä§Ìä∏ Î≥ÄÌôò\n" +
                            "4Ô∏è‚É£ 'ÎÖπÏùå Ï§ë...' ÌÑ∞ÏπòÌïòÏó¨ Ï§ëÏßÄ\n" +
                            "5Ô∏è‚É£ 'Ïû¨ÏÉùÌïòÍ∏∞'Î°ú ÎÖπÏùå ÌååÏùº ÌôïÏù∏",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    lineHeight = MaterialTheme.typography.bodySmall.lineHeight
                )
            }
        }
    }
}

@Preview(showBackground = true, heightDp = 800)
@Composable
private fun PreviewGasWritingScreen() {
    KONKUKHACKATHONTEAM3Theme {
        GasWritingScreen(
            navigateToRanking = {},
            recordButtonClicked = {},
            playButtonClicked = {},
            updateClientId = {},
            updateClientSecret = {},
            updateLanguage = {},
            clearText = {},
            clearErrors = {},
            uiState = GasWritingUiState(
                hasAudioPermission = true,
                isRecording = true,
                clientId = "sample_client_id",
                finalText = "ÏïàÎÖïÌïòÏÑ∏Ïöî, Ïã§ÏãúÍ∞Ñ ÏùåÏÑ±Ïù∏Ïãù ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§.",
                partialText = "ÌòÑÏû¨ Î≥ÄÌôò Ï§ëÏù∏ ÌÖçÏä§Ìä∏...",
                chunkCount = 3,
                isProcessingSTT = true,
                audioRecord = null
            )
        )
    }
}